if (verbose){
setTxtProgressBar(pb, i)
}
}
if (verbose){
close(pb)
}
#
#   logandbic <- LogLik_and_BIC(data_l, data_c, Estimates)
#   lambdas$bic <- logandbic$BIC
#   lambdas$loglik <- logandbic$logLik
lambdas$ebic <- sapply(Estimates,'[[','EBIC')
if (all(lambdas$ebic==Inf)){
stop("No model estimated without error")
}
# Which minimal BIC:
min <- which.min(lambdas$ebic)
Results <- Estimates[[min]]
# Warnings:
if (length(lambda_beta)>1){
if (lambdas$beta[[min]] == min(lambda_beta)){
message("Minimal tuning parameter for beta selected.")
}
}
if (length(lambda_kappa)>1){
if (lambdas$kappa[[min]] == min(lambda_kappa)){
message("Minimal tuning parameter for kappa selected.")
}
}
# Names of beta:
colnames(Results$beta) <- colnames(data_l)
rownames(Results$beta) <- colnames(data_c)
# Standardize matrices (Wild et al. 2010)
# partial contemporaneous correlation (PCC)
Results$PCC <- computePCC(Results$kappa)
# PDS only for lag one!
if (1 %in% lags){
Results$PDC <- computePDC(Results$beta[,c("1",paste0(data$vars,"_lag1"))], Results$kappa)
if (length(lags) > 1){
warning("Partial directed correlations only computed for lag 1 network.")
}
}
Results$path <- lambdas
Results$labels <- colnames(data_c)
if (is.null(Results$labels)){
Results$labels <- paste0("V",seq_len(ncol(data_c)))
}
# colnames(Results$beta) <- c("1",Results$labels)
rownames(Results$beta) <- colnames(Results$kappa) <- rownames(Results$kappa) <-
colnames(Results$PCC) <- rownames(Results$PCC) <- colnames(Results$PDC) <- rownames(Results$PDC) <-
Results$labels
Results$gamma <- gamma
Results$allResults <- Estimates
Results$N <- nrow(data_c)
Results$data <- data
class(Results) <- "graphicalVAR"
return(Results)
}
df <- read.csv('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/ESM_using.csv')
keep = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy',
'day_var')
# , 'beep_var', 'day_var', 'id_var')
vars = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy'
)
df = df[keep]
graphicalVAR(df,
nLambda = 50,
verbose = TRUE,
gamma = 0.5,
scale = TRUE,
#lambda_beta,
#lambda_kappa,
#regularize_mat_beta,
#regularize_mat_kappa,
maxit.in = 100,
maxit.out = 100,
deleteMissings = TRUE,
penalize.diagonal = TRUE,
lambda_min_kappa = 0.05,
lambda_min_beta = 0.05,
#mimic,
vars,
#beepvar =  "beep_var",
dayvar = 'day_var',
#idvar = "id_var",
lags = 1,
centerWithin = TRUE,
likelihood = c("unpenalized", "penalized"))
df <- read.csv('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/ESM_using.csv')
keep = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy',
'day_var')
# , 'beep_var', 'day_var', 'id_var')
vars = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy'
)
df$day_var = as.double(df$day_var)
dayvar = df$day_var
df$id_var = paste(df$id_var)
df$beep_var = paste(df$beep_var)
df = df[keep]
graphicalVAR(df,
nLambda = 50,
verbose = TRUE,
gamma = 0.5,
scale = TRUE,
#lambda_beta,
#lambda_kappa,
#regularize_mat_beta,
#regularize_mat_kappa,
maxit.in = 100,
maxit.out = 100,
deleteMissings = TRUE,
penalize.diagonal = TRUE,
lambda_min_kappa = 0.05,
lambda_min_beta = 0.05,
#mimic,
vars,
#beepvar =  "beep_var",
dayvar = 'day_var',
#idvar = "id_var",
lags = 1,
centerWithin = TRUE,
likelihood = c("unpenalized", "penalized"))
library(foreign)
# library("devtools")
# devtools::install_github("sachaepskamp/bootnet")
install.pacakges('bootnet')
library(bootnet)
# devtools::install_github("sachaepskamp/qgraph")
install.pacakges('qgraph')
library(qgraph)
# devtools::install_github("jmbh/mgm")
install.packages('mgm')
library(mgm)
install.packages('NetworkComparisonTest')
library(foreign)
library("devtools")
devtools::install_github("sachaepskamp/bootnet")
#install.packages('bootnet')
library(bootnet)
devtools::install_github("sachaepskamp/qgraph")
#install.packages('qgraph')
library(qgraph)
devtools::install_github("jmbh/mgm")
#install.packages('mgm')
library(mgm)
install.packages('NetworkComparisonTest')
library('NetworkComparisonTest')
setwd('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/PTSD_paper')
data_full<-read.spss("PTSD_data_V1.sav", to.data.frame=TRUE)
#-------------------------------------------------------------#
###########Clean Data Frame as per Armour et al
#-------------------------------------------------------------#
# Create data frame of variables that we need for analysis:
# age, gender, all 20 symptoms (_MONTH extension), Sum_GAD2, Sum_PHQ2, Passive_SI_FINAL, Active_SI_FINAL, PCS, MCS, QualityofLife_SUM)
data<-as.data.frame(data_full[,c(2:3,11:37)]) # data for analysis
data <- subset(data, select=c(Q28_01_MONTH:QualityofLife_SUM, PPAGE, PPGENDER)) #put covariates last
data[, 29]<-ifelse(data$PPGENDER=='Male',1,2) # 1 is male; 2 is female
data<-data[,-c(23,27)] # Remove SI_passive & QoL, we decided later we don't want them
data_ptsd<-as.data.frame(data[,c(1:20)]) # PTSD items only
### A. Make correlation matrix
data_ptsd.cor<-cor_auto(data_ptsd) #only ptsd symptoms
data.cor<-cor_auto(data) #data including covariates
### B. Create names object & group object for graph
names<-c("B1","B2", "B3", "B4", "B5", "C1", "C2", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "E1", "E2", "E3", "E4", "E5", "E6")
names1<-c("B1","B2", "B3", "B4", "B5", "C1", "C2", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "E1", "E2", "E3", "E4", "E5", "E6", "Anx", "Dep", "SI", "PFunc", "Mfunc", "Age", "Sex")
longnames <- c("Intrusive thoughts", "Nightmares", "Flashbacks", "Emotional cue reactivity", "Physiological cue reactivity", "Avoidance of thoughts", "Avoidance of reminders", "Trauma-related amnesia", "Negative beliefs", "Blame of self or others", "Negative trauma-related emotions", "Loss of interest", "Detachment", "Restricted affect", "Irritability/anger", "Self-destructive/reckless behavior", "Hypervigilance", "Exaggerated startle response", "Difficulty concentrating", "Sleep disturbance")
longnames1 <- c("Intrusive thoughts", "Nightmares", "Flashbacks", "Emotional cue reactivity", "Physiological cue reactivity", "Avoidance of thoughts", "Avoidance of reminders", "Trauma-related amnesia", "Negative beliefs", "Blame of self or others", "Negative trauma-related emotions", "Loss of interest", "Detachment", "Restricted affect", "Irritability/anger", "Self-destructive/reckless behavior", "Hypervigilance", "Exaggerated startle response", "Difficulty concentrating", "Sleep disturbance", "Anxiety", "Depression", "Suicidal ideation", "Physical functioning", "Mental functioning", "Age", "Sex")
gr1 <- list(c(21:27), c(1:20))                         #first covariates, second group ptsd symptoms
gr2 <- list(c(21:27), c(1:5), c(6:7),c(8:14),c(15:20)) #first covariates, then PTSD symptoms categories B C D E
gr3 <- list("Intrusions"=c(1:5), "Avoidance"=c(6:7), "Cognition & mood alterations"=c(8:14),"Arousal & reactivity alterations"=c(15:20)) #PTSD symptoms categories B C D E
gr4 <- list("Intrusions"=c(1:5), "Avoidance"=c(6:7), "Cognition & mood alterations"=c(8:14),"Arousal & reactivity alterations"=c(15:20), "Clinical covariates"=c(21:27))
#-------------------------------------------------------------#
###########Relevant elements for NCT from Armour et al
#-------------------------------------------------------------#
#note that data is 27 covariates, data_ptsd is 20
## EBICglasso outputs
graph_ptsd.m <-EBICglasso(data_ptsd.cor, n = nrow(data_ptsd))
graph.m <-EBICglasso(data.cor, n = nrow(data))
## Qgraph objects
graph_ptsd.g<-qgraph(data_ptsd.cor, labels=names, graph="glasso", layout="spring",
vsize=6, cut=0, maximum=.45, sampleSize = nrow(data_ptsd),
border.width=1.5, border.color="black", minimum=.03,
groups=gr3, color=c('#a8e6cf', '#dcedc1', '#ffd3b6', '#ff8b94'),
nodeNames = longnames,legend.cex=.4)
graph.g<-qgraph(data.cor, graph="glasso", layout="spring", sampleSize = nrow(data),
vsize=6, cut=0, maximum=.45, minimum=.03, border.width=1.5, border.color="black",
groups=gr4, color=c('#a8e6cf', '#dcedc1', '#ffd3b6', '#ff8b94', '#bbbbbb'),
labels=names1, nodeNames = longnames1,legend.cex=.4)
## bootnet estimate network object
network_ptsd <-estimateNetwork(data_ptsd, default = "EBICglasso")
network <-estimateNetwork(data, default = "EBICglasso", corMethod = 'cor_auto') #note that the last option was added in order to compute the correlations between ordinal and non-ordinal data (polychoric and polyserial)
# ---------------------------------------------------------------------------------------
########### NCT
# ---------------------------------------------------------------------------------------
NCT_test = NCT(network_ptsd, network)
network <-estimateNetwork(data, default = "EBICglasso") #note that the last option was added in order to compute the correlations between ordinal and non-ordinal data (polychoric and polyserial)
network_ptsd <-estimateNetwork(data_ptsd, default = "EBICglasso", , corMethod = 'cor_auto')
network <-estimateNetwork(data, default = "EBICglasso", corMethod = 'cor_auto') #note that t
NCT_test = NCT(network_ptsd, network)
network$graph
dim(network$graph)
test = dim(network$graph)
test[1:20, 1:20]
test = network$graph
test[1:20, 1:20]
View(network)
network$graph = test
test
test = network$graph[1:20, 1:20]
dim(test)
network$graph = test
View(network)
network$results$results
network$results$results$w = network$results$results$w [1:20, 1:20, 100]
network$results$results$wi = network$results$results$w [1:20, 1:20, 100]
network$results$results$wi = network$results$results$wi[1:20, 1:20, 100]
View(network)
View(network_ptsd)
network$results$optnet = network$results$optnet[1:20, 1:20]
network$results$optwi = network$results$optwi[1:20, 1:20]
network[["labels"]]
network[["labels"]][1:20]
network[['labels']] = network[["labels"]][1:20]
View(network)
View(network_ptsd)
network$data
NCT_test = NCT(network_ptsd, network)
View(network_ptsd)
network <-estimateNetwork(data, default = "EBICglasso", corMethod = 'cor_auto') #note that the last option was added in order to compute the correlations between ordinal and non-ordinal data (polychoric and polyserial)
View(network)
network$results$results$w = network$results$results$w[1:20, 1:20, ]
network$results$results$wi = network$results$results$wi[1:20, 1:20, ]
network$results$optnet = network$results$results$w[1:20, 1:20]
network$results$optwi = network$results$optwi[1:20, 1:20]
network$labels = network$labels[1:20]
network <-estimateNetwork(data, default = "EBICglasso", corMethod = 'cor_auto') #note that the last option was added in order to compute the correlations between ordinal and non-ordinal data (polychoric and polyserial)
network$results$results$w = network$results$results$w[1:20, 1:20, ]
network$results$results$wi = network$results$results$wi[1:20, 1:20, :]
network$results$optnet = network$results$results$w[1:20, 1:20]
network$results$optwi = network$results$optwi[1:20, 1:20]
network$labels = network$labels[1:20]
network <-estimateNetwork(data, default = "EBICglasso", corMethod = 'cor_auto') #note that the last option was added in order to compute the correlations between ordinal and non-ordinal data (polychoric and polyserial)
network$results$results$w = network$results$results$w[1:20, 1:20, ]
network$results$results$wi = network$results$results$wi[1:20, 1:20, ]
network$results$optnet =network$results$optnet[1:20, 1:20]
network$results$optwi = network$results$optwi[1:20, 1:20]
network$labels = network$labels[1:20]
NCT_test = NCT(network_ptsd, network)
network$data$Sum_GAD2 = NULL
View(network)
network$data$Sum_PHQ2 = NULL
network$data$Active_SI_FINAL = NULL
network$data$PCS = NULL
network$data$MCS = NULL
network$data$PPAGE = NULL
network$data$PPGENDER = NULL
View(network)
NCT_test = NCT(network_ptsd, network)
NCT_test
NCT_and = NCT(network, #takes either data or estimateNetwork object as input. We need the latter
network_ptsd, #takes either data or estimateNetwork object as input. We need the latter
gamma = 0.5, #same as that used by the paper (see that they use the default EBIC glasso. See bootnet documentation for Estimate Network - tuning - EBICglasso)
it = 100,
binary.data = FALSE,
paired=FALSE, #samples are independent
weighted=TRUE,  #compare network weights
AND = TRUE, #authors don't say which they use so we run for both
abs = FALSE, #not sure about this one
test.edges=TRUE, #test individual edges
#edges,  #optional list of edges to test
progressbar=TRUE,
make.positive.definite=TRUE,
p.adjust.methods="none", #not controlling for testing of multiple edges
test.centrality = TRUE,
centrality = c('betweeness', 'closeness', 'strength'),
#nodes, #optional list of nodes to select for testing centrality.
verbose = TRUE)
CT_and = NCT(network, #takes either data or estimateNetwork object as input. We need the latter
network_ptsd, #takes either data or estimateNetwork object as input. We need the latter
gamma = 0.5, #same as that used by the paper (see that they use the default EBIC glasso. See bootnet documentation for Estimate Network - tuning - EBICglasso)
it = 100,
binary.data = FALSE,
paired=FALSE, #samples are independent
weighted=TRUE,  #compare network weights
AND = TRUE, #authors don't say which they use so we run for both
abs = FALSE, #not sure about this one
test.edges=TRUE, #test individual edges
#edges,  #optional list of edges to test
progressbar=TRUE,
make.positive.definite=TRUE,
p.adjust.methods="none", #not controlling for testing of multiple edges
test.centrality = TRUE,
centrality = c('betweenness', 'closeness', 'strength'),
#nodes, #optional list of nodes to select for testing centrality.
verbose = TRUE)
warnings()
NCT_or
NCT_or
NCT_and
NCT_and = NCT(network, #takes either data or estimateNetwork object as input. We need the latter
network_ptsd, #takes either data or estimateNetwork object as input. We need the latter
gamma = 0.5, #same as that used by the paper (see that they use the default EBIC glasso. See bootnet documentation for Estimate Network - tuning - EBICglasso)
it = 100,
binary.data = FALSE,
paired=FALSE, #samples are independent
weighted=TRUE,  #compare network weights
AND = TRUE, #authors don't say which they use so we run for both
abs = FALSE, #not sure about this one
test.edges=TRUE, #test individual edges
#edges,  #optional list of edges to test
progressbar=TRUE,
make.positive.definite=TRUE,
p.adjust.methods="none", #not controlling for testing of multiple edges
test.centrality = TRUE,
centrality = c('betweenness', 'closeness', 'strength'),
#nodes, #optional list of nodes to select for testing centrality.
verbose = TRUE)
NCT_and
View(NCT_and)
NCT_or = NCT(network, #takes either data or estimateNetwork object as input. We need the latter
network_ptsd, #takes either data or estimateNetwork object as input. We need the latter
gamma = 0.5, #same as that used by the paper (see that they use the default EBIC glasso. See bootnet documentation for Estimate Network - tuning - EBICglasso)
it = 100,
binary.data = FALSE,
paired=FALSE, #samples are independent
weighted=TRUE,  #compare network weights
AND = TRUE, #authors don't say which they use so we run for both
abs = FALSE, #not sure about this one
test.edges=TRUE, #test individual edges
#edges,  #optional list of edges to test
progressbar=TRUE,
make.positive.definite=TRUE,
p.adjust.methods="none", #not controlling for testing of multiple edges
test.centrality = TRUE,
centrality = c('betweenness', 'closeness', 'strength'),
#nodes, #optional list of nodes to select for testing centrality.
verbose = TRUE)
network$graph - network_ptsd$graph
setwd('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/PTSD_paper')
data_full<-read.spss("PTSD_data_V1.sav", to.data.frame=TRUE)
#-------------------------------------------------------------#
###########Clean Data Frame as per Armour et al
#-------------------------------------------------------------#
# Create data frame of variables that we need for analysis:
# age, gender, all 20 symptoms (_MONTH extension), Sum_GAD2, Sum_PHQ2, Passive_SI_FINAL, Active_SI_FINAL, PCS, MCS, QualityofLife_SUM)
data<-as.data.frame(data_full[,c(2:3,11:37)]) # data for analysis
data <- subset(data, select=c(Q28_01_MONTH:QualityofLife_SUM, PPAGE, PPGENDER)) #put covariates last
data[, 29]<-ifelse(data$PPGENDER=='Male',1,2) # 1 is male; 2 is female
data<-data[,-c(23,27)] # Remove SI_passive & QoL, we decided later we don't want them
data_ptsd<-as.data.frame(data[,c(1:20)]) # PTSD items only
### A. Make correlation matrix
data_ptsd.cor<-cor_auto(data_ptsd) #only ptsd symptoms
data.cor<-cor_auto(data) #data including covariates
### B. Create names object & group object for graph
names<-c("B1","B2", "B3", "B4", "B5", "C1", "C2", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "E1", "E2", "E3", "E4", "E5", "E6")
names1<-c("B1","B2", "B3", "B4", "B5", "C1", "C2", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "E1", "E2", "E3", "E4", "E5", "E6", "Anx", "Dep", "SI", "PFunc", "Mfunc", "Age", "Sex")
longnames <- c("Intrusive thoughts", "Nightmares", "Flashbacks", "Emotional cue reactivity", "Physiological cue reactivity", "Avoidance of thoughts", "Avoidance of reminders", "Trauma-related amnesia", "Negative beliefs", "Blame of self or others", "Negative trauma-related emotions", "Loss of interest", "Detachment", "Restricted affect", "Irritability/anger", "Self-destructive/reckless behavior", "Hypervigilance", "Exaggerated startle response", "Difficulty concentrating", "Sleep disturbance")
longnames1 <- c("Intrusive thoughts", "Nightmares", "Flashbacks", "Emotional cue reactivity", "Physiological cue reactivity", "Avoidance of thoughts", "Avoidance of reminders", "Trauma-related amnesia", "Negative beliefs", "Blame of self or others", "Negative trauma-related emotions", "Loss of interest", "Detachment", "Restricted affect", "Irritability/anger", "Self-destructive/reckless behavior", "Hypervigilance", "Exaggerated startle response", "Difficulty concentrating", "Sleep disturbance", "Anxiety", "Depression", "Suicidal ideation", "Physical functioning", "Mental functioning", "Age", "Sex")
gr1 <- list(c(21:27), c(1:20))                         #first covariates, second group ptsd symptoms
gr2 <- list(c(21:27), c(1:5), c(6:7),c(8:14),c(15:20)) #first covariates, then PTSD symptoms categories B C D E
gr3 <- list("Intrusions"=c(1:5), "Avoidance"=c(6:7), "Cognition & mood alterations"=c(8:14),"Arousal & reactivity alterations"=c(15:20)) #PTSD symptoms categories B C D E
gr4 <- list("Intrusions"=c(1:5), "Avoidance"=c(6:7), "Cognition & mood alterations"=c(8:14),"Arousal & reactivity alterations"=c(15:20), "Clinical covariates"=c(21:27))
#-------------------------------------------------------------#
###########Relevant elements for NCT from Armour et al
#-------------------------------------------------------------#
#note that data is 27 covariates, data_ptsd is 20
## EBICglasso outputs
graph_ptsd.m <-EBICglasso(data_ptsd.cor, n = nrow(data_ptsd))
graph.m <-EBICglasso(data.cor, n = nrow(data))
## Qgraph objects
graph_ptsd.g<-qgraph(data_ptsd.cor, labels=names, graph="glasso", layout="spring",
vsize=6, cut=0, maximum=.45, sampleSize = nrow(data_ptsd),
border.width=1.5, border.color="black", minimum=.03,
groups=gr3, color=c('#a8e6cf', '#dcedc1', '#ffd3b6', '#ff8b94'),
nodeNames = longnames,legend.cex=.4)
graph.g<-qgraph(data.cor, graph="glasso", layout="spring", sampleSize = nrow(data),
vsize=6, cut=0, maximum=.45, minimum=.03, border.width=1.5, border.color="black",
groups=gr4, color=c('#a8e6cf', '#dcedc1', '#ffd3b6', '#ff8b94', '#bbbbbb'),
labels=names1, nodeNames = longnames1,legend.cex=.4)
## bootnet estimate network object
network_ptsd <-estimateNetwork(data_ptsd, default = "EBICglasso", corMethod = 'cor_auto')
network <-estimateNetwork(data, default = "EBICglasso", corMethod = 'cor_auto') #note that the last option was added in order to compute the correlations between ordinal and non-ordinal data (polychoric and polyserial)
#now i need to adjust the dimensions of the network in order to have the same elements for comparison
network$results$results$w = network$results$results$w[1:20, 1:20, ]
network$results$results$wi = network$results$results$wi[1:20, 1:20, ]
network$results$optnet =network$results$optnet[1:20, 1:20]
network$results$optwi = network$results$optwi[1:20, 1:20]
network$labels = network$labels[1:20]
network$data$Sum_GAD2 = NULL
network$data$Sum_PHQ2 = NULL
network$data$Active_SI_FINAL = NULL
network$data$PCS = NULL
network$data$MCS = NULL
network$data$PPAGE = NULL
network$data$PPGENDER = NULL
dim(network$graph)
NCT_test = NCT(network_ptsd, network)
View(NCT_test)
network$graph = network$graph[1:20, 1:20]
NCT_test[["nwinv.perm"]]
library('graphicalVAR')
library('dplyr')
df <- read.csv('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/ESM_data_github_issue.csv')
vars = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy',
'day_var', 'id_var', 'beep_var')
df = df[vars] #in order to drop 'SentAt'
x <- graphicalVAR(df,
nLambda = 50,
verbose = TRUE,
gamma = 0.5,
scale = TRUE,
#lambda_beta,
#lambda_kappa,
#regularize_mat_beta,
#regularize_mat_kappa,
maxit.in = 100,
maxit.out = 100,
deleteMissings = FALSE,
penalize.diagonal = TRUE,
lambda_min_kappa = 0.05,
lambda_min_beta = 0.05,
#mimic,
vars,
beepvar =  "beep_var",
dayvar = 'day_var',
idvar = "id_var",
lags = 1,
centerWithin = FALSE,
likelihood = c("unpenalized", "penalized"))
library('graphicalVAR')
library('dplyr')
df <- read.csv('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/ESM_data_github_issue.csv')
vars = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy',
'day_var', 'id_var', 'beep_var')
df = df[vars] #in order to drop 'SentAt'
x <- graphicalVAR(df,
nLambda = 50,
verbose = TRUE,
gamma = 0.5,
scale = TRUE,
#lambda_beta,
#lambda_kappa,
#regularize_mat_beta,
#regularize_mat_kappa,
maxit.in = 100,
maxit.out = 100,
deleteMissings = FALSE,
penalize.diagonal = TRUE,
lambda_min_kappa = 0.05,
lambda_min_beta = 0.05,
#mimic,
vars,
beepvar =  "beep_var",
dayvar = 'day_var',
idvar = "id_var",
lags = 1,
centerWithin = FALSE,
likelihood = c("unpenalized", "penalized"))
library('graphicalVAR')
library('dplyr')
df <- read.csv('/Users/benseimon/Documents/Barca GSE/Studies/Term 3/Advanced Techniques/term_paper/psych-networks-brownlees/ESM_data_github_issue.csv')
vars = c('Control', 'Sad', 'Intrusion', 'Encourage',
'FunThings', 'IgotThis', 'Alone', 'Thoughts',
'Appointments', 'Laying',
'Out', 'Eaten', 'Avoid', 'Useful', 'Enjoy',
'day_var', 'id_var', 'beep_var')
df = df[vars] #in order to drop 'SentAt'
x <- graphicalVAR(df,
nLambda = 50,
verbose = TRUE,
gamma = 0.5,
scale = TRUE,
#lambda_beta,
#lambda_kappa,
#regularize_mat_beta,
#regularize_mat_kappa,
maxit.in = 100,
maxit.out = 100,
deleteMissings = FALSE,
penalize.diagonal = TRUE,
lambda_min_kappa = 0.05,
lambda_min_beta = 0.05,
#mimic,
vars,
beepvar =  "beep_var",
dayvar = 'day_var',
idvar = "id_var",
lags = 1,
centerWithin = FALSE,
likelihood = c("unpenalized", "penalized"))
names(data)
nams(df)
names(df)
df
